"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "compareJSON", {
    enumerable: true,
    get: function() {
        return compareJSON;
    }
});
var _type = require("../utilities/type");
var _jsonTypes = require("../jsonTypes");
var _jsonComparisons = require("../jsonComparisons");
var arrayUtilities = require("necessary").arrayUtilities;
var first = arrayUtilities.first;
function compareJSON(jsonA, jsonB) {
    var jsonComparison = MAJOR_VERSION_NUMBER_CHANGE;
    var jsonAType = (0, _type.typeOf)(jsonA), jsonBType = (0, _type.typeOf)(jsonB);
    if (jsonAType === jsonBType) {
        var jsonType = jsonAType; ///
        switch(jsonType){
            case _jsonTypes.ARRAY_JSON_TYPE:
                {
                    var arrayA = jsonA, arrayB = jsonB; ///
                    jsonComparison = compareArrays(arrayA, arrayB);
                    break;
                }
            case _jsonTypes.OBJECT_JSON_TYPE:
                {
                    var objectA = jsonA, objectB = jsonB; ///
                    jsonComparison = compareObjects(objectA, objectB);
                    break;
                }
            case _jsonTypes.PRIMITIVE_JSON_TYPE:
                {
                    var primitiveA = jsonA, primitiveB = jsonB; ///
                    jsonComparison = comparePrimitives(primitiveA, primitiveB);
                    break;
                }
        }
    }
    return jsonComparison;
}
function compareArrays(arrayA, arrayB) {
    var jsonComparison;
    var arrayALength = arrayA.length, arrayBLength = arrayB.length;
    if (arrayALength <= arrayBLength) {
        if (arrayALength === 0) {
            if (arrayALength === arrayBLength) {
                jsonComparison = _jsonComparisons.EQUAL_TO_JSON_COMPARISON;
            } else {
                jsonComparison = _jsonComparisons.STRICTLY_LESS_THAN_JSON_COMPARISON;
            }
        } else {
            var firstJsonComparison = _jsonComparisons.NOT_EQUAL_TO_JSON_COMPARISON;
            var elementsA = arrayA, elementsB = arrayB, firstElementA = first(elementsA), elementA = firstElementA; ///
            var foundElementB = null;
            if (foundElementB === null) {
                elementsB.some(function(elementB) {
                    var jsonA = elementA, jsonB = elementB; ///
                    firstJsonComparison = compareJSON(jsonA, jsonB);
                    if (firstJsonComparison === _jsonComparisons.EQUAL_TO_JSON_COMPARISON) {
                        foundElementB = elementB; ///
                        return true;
                    }
                });
            }
            if (foundElementB === null) {
                elementsB.some(function(elementB) {
                    var jsonA = elementA, jsonB = elementB; ///
                    firstJsonComparison = compareJSON(jsonA, jsonB);
                    if (firstJsonComparison === _jsonComparisons.STRICTLY_LESS_THAN_JSON_COMPARISON) {
                        foundElementB = elementB; ///
                        return true;
                    }
                });
            }
            if (firstJsonComparison === _jsonComparisons.NOT_EQUAL_TO_JSON_COMPARISON) {
                jsonComparison = _jsonComparisons.NOT_EQUAL_TO_JSON_COMPARISON;
            } else {
                var elementB = foundElementB; ///
                arrayB = deleteElement(arrayB, elementA); ///
                arrayB = deleteElement(arrayB, elementB); ///
                var jsonA = arrayB, jsonB = arrayB, remainingJSONComparison = compareJSON(jsonA, jsonB);
                if (remainingJSONComparison === _jsonComparisons.NOT_EQUAL_TO_JSON_COMPARISON) {
                    jsonComparison = _jsonComparisons.NOT_EQUAL_TO_JSON_COMPARISON;
                } else {
                    if (firstJsonComparison === _jsonComparisons.STRICTLY_LESS_THAN_JSON_COMPARISON || remainingJSONComparison === _jsonComparisons.STRICTLY_LESS_THAN_JSON_COMPARISON) {
                        jsonComparison = _jsonComparisons.STRICTLY_LESS_THAN_JSON_COMPARISON;
                    } else {
                        jsonComparison = _jsonComparisons.NOT_EQUAL_TO_JSON_COMPARISON;
                    }
                }
            }
        }
    } else {
        jsonComparison = _jsonComparisons.NOT_EQUAL_TO_JSON_COMPARISON;
    }
    return jsonComparison;
}
function compareObjects(objectA, objectB) {
    var jsonComparison;
    var keysA = Object.keys(objectA), keysB = Object.keys(objectB), keysALength = keysA.length, keysBLength = keysB.length;
    if (keysALength <= keysBLength) {
        if (keysALength === 0) {
            if (keysALength === keysBLength) {
                jsonComparison = _jsonComparisons.EQUAL_TO_JSON_COMPARISON;
            } else {
                jsonComparison = _jsonComparisons.STRICTLY_LESS_THAN_JSON_COMPARISON;
            }
        } else {
            var firstJsonComparison = _jsonComparisons.NOT_EQUAL_TO_JSON_COMPARISON;
            var firstKeyA = first(keysA), keyA = firstKeyA; ///
            keysB.some(function(keyB) {
                if (keyB === keyA) {
                    var valueA = objectA[keyA], valueB = objectB[keyB], jsonA = valueA, jsonB = valueB; ///
                    firstJsonComparison = compareJSON(jsonA, jsonB);
                    return true;
                }
            });
            if (firstJsonComparison === _jsonComparisons.NOT_EQUAL_TO_JSON_COMPARISON) {
                jsonComparison = _jsonComparisons.NOT_EQUAL_TO_JSON_COMPARISON;
            } else {
                var keyB = keyA; ///
                objectA = deleteKey(objectA, keyA); ///
                objectB = deleteKey(objectB, keyB); ///
                var jsonA = objectA, jsonB = objectB, remainingJSONComparison = compareJSON(jsonA, jsonB);
                if (remainingJSONComparison === _jsonComparisons.NOT_EQUAL_TO_JSON_COMPARISON) {
                    jsonComparison = _jsonComparisons.NOT_EQUAL_TO_JSON_COMPARISON;
                } else {
                    if (firstJsonComparison === _jsonComparisons.STRICTLY_LESS_THAN_JSON_COMPARISON || remainingJSONComparison === _jsonComparisons.STRICTLY_LESS_THAN_JSON_COMPARISON) {
                        jsonComparison = _jsonComparisons.STRICTLY_LESS_THAN_JSON_COMPARISON;
                    } else {
                        jsonComparison = _jsonComparisons.NOT_EQUAL_TO_JSON_COMPARISON;
                    }
                }
            }
        }
    } else {
        jsonComparison = _jsonComparisons.NOT_EQUAL_TO_JSON_COMPARISON;
    }
    return jsonComparison;
}
function comparePrimitives(primitiveA, primitiveB) {
    var jsonComparison;
    if (primitiveA === primitiveB) {
        jsonComparison = _jsonComparisons.EQUAL_TO_JSON_COMPARISON;
    } else {
        jsonComparison = _jsonComparisons.NOT_EQUAL_TO_JSON_COMPARISON;
    }
    return jsonComparison;
}
function deleteElement(array, element) {
    var deletedElement = element; ///
    array = array.reduce(function(array, element) {
        if (element !== deletedElement) {
            array.push(element);
        }
        return array;
    }, []);
    return array;
}
function deleteKey(object, key) {
    var deletedKey = key, keys = Object.keys(object), values = Object.values(object);
    object = keys.reduce(function(object, key, index) {
        if (key !== deletedKey) {
            var value = values[index];
            object[key] = value;
        }
        return object;
    }, {});
    return object;
}

//# sourceMappingURL=data:application/json;base64,